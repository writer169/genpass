import { useEffect, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import CryptoJS from "crypto-js";

export default function Generator() {
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
  const [showPassword, setShowPassword] = useState(false);
  const router = useRouter();

  useEffect(() => {
  if (window.Module?.isReady) {
    console.log("Argon —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    setIsLoading(false);

    const savedSettings = localStorage.getItem("passwordSettings");
    if (savedSettings) {
      try {
        const settings = JSON.parse(savedSettings);
        applySettings(settings);
        localStorage.removeItem("passwordSettings");
        log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", true);
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", e);
        log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
      }
    }

    return;
  }

  setIsLoading(true);
  const script = document.createElement("script");
  script.src = "/argon2.js";
  script.async = true;

  script.onload = () => {
    if (!window.Module) {
      console.error("window.Module –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω");
      log("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è Argon2");
      setIsLoading(false);
      return;
    }

    window.Module.onRuntimeInitialized = () => {
      console.log("Argon2 –≥–æ—Ç–æ–≤");
      window.Module.isReady = true;
      setIsLoading(false);

      const savedSettings = localStorage.getItem("passwordSettings");
      if (savedSettings) {
        try {
          const settings = JSON.parse(savedSettings);
          applySettings(settings);
          localStorage.removeItem("passwordSettings");
          log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", true);
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", e);
          log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
        }
      }
    };
  };

  script.onerror = () => {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ argon2.js");
    log("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞");
    setIsLoading(false);
  };

  document.body.appendChild(script);
}, []);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const resetSettings = () => {
    document.getElementById("service").value = "";
    document.getElementById("account").value = "default";
    document.getElementById("device").value = "default"; 
    document.getElementById("version").value = "00";
    document.getElementById("length").value = "16";
    document.getElementById("lowercase").checked = true;
    document.getElementById("uppercase").checked = true;
    document.getElementById("digits").checked = true;
    document.getElementById("symbols").checked = true;
    document.getElementById("master").value = "";
    document.getElementById("result").value = "";
  };

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é saveSettings –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
  const saveSettings = async () => {
    const master = document.getElementById("master").value.trim();
    if (!master) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const settings = getSettings();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let nameComponents = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    if (!settings.service.trim()) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞");
      return;
    }
    nameComponents.push(settings.service);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ 'default'
    if (settings.account !== 'default') {
      nameComponents.push(settings.account);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ 'default'
    if (settings.device !== 'default') {
      nameComponents.push(settings.device);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ '00'
    if (settings.version !== '00') {
      nameComponents.push(`v${settings.version}`);
    }
    
    let saveName = nameComponents.join(' - ');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
      const response = await fetch(`/api/entries?name=${encodeURIComponent(saveName)}`);
      const data = await response.json();
      
      if (data.exists) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –∫ –∏–º–µ–Ω–∏
        let counter = 1;
        let newName = `${saveName} (${counter})`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        while (true) {
          const checkResponse = await fetch(`/api/entries?name=${encodeURIComponent(newName)}`);
          const checkData = await checkResponse.json();
          
          if (!checkData.exists) {
            saveName = newName;
            break;
          }
          
          counter++;
          newName = `${saveName} (${counter})`;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é —Å—Ö–µ–º—É)
      const salt = saveName;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∏–∑ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è
      const key = CryptoJS.PBKDF2(master, salt, {
        keySize: 256 / 32,
        iterations: 1000
      });
      
      // –®–∏—Ñ—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const encryptedData = CryptoJS.AES.encrypt(
        JSON.stringify(settings), 
        key.toString()
      ).toString();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const saveResponse = await fetch("/api/entries", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: saveName,
          encryptedData: encryptedData
        })
      });
      
      const saveData = await saveResponse.json();
      
      if (saveData.success) {
        log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ "${saveName}"`, true);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          router.push("/");
        }, 2000);
      } else {
        throw new Error(saveData.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
      }
    } catch (err) {
      console.error("Error saving settings:", err);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${err.message}`);
    }
  };

  return (
    <>
      <Head>
        <title>–†–µ–¥–∞–∫—Ç–æ—Ä –ø–∞—Ä–æ–ª—è</title>
        <link rel="stylesheet" href="/styles.css" />
      </Head>
      <div className="container">
        <div className="card">
          <div className="header">
            <button 
              className="back-btn" 
              onClick={() => router.push("/")}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            <h1>–†–µ–¥–∞–∫—Ç–æ—Ä –ø–∞—Ä–æ–ª—è</h1>
          </div>

          <div className="form-group">
            <label htmlFor="master">–ú–∞—Å—Ç–µ—Ä-—Ñ—Ä–∞–∑–∞</label>
            <div className="password-input-container">
              <input 
                type={showPassword ? "text" : "password"} 
                id="master" 
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É" 
              />
              <button 
                className="toggle-password-btn" 
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
              </button>
            </div>
          </div>

          <div className="form-group">
            <label htmlFor="service">–°–µ—Ä–≤–∏—Å</label>
            <input type="text" id="service" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: google.com" />
          </div>

          <div className="row">
            <div className="col">
              <div className="form-group">
                <label htmlFor="account">–ê–∫–∫–∞—É–Ω—Ç</label>
                <input type="text" id="account" defaultValue="default" />
              </div>
            </div>
            <div className="col">
              <div className="form-group">
                <label htmlFor="device">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</label>
                <input type="text" id="device" defaultValue="default" />
              </div>
            </div>
          </div>

          <div className="row">
            <div className="col">
              <div className="form-group">
                <label htmlFor="version">–í–µ—Ä—Å–∏—è</label>
                <input type="text" id="version" defaultValue="00" maxLength={2} placeholder="00" />
              </div>
            </div>
            <div className="col">
              <div className="form-group">
                <label htmlFor="length">–î–ª–∏–Ω–∞</label>
                <input type="number" id="length" min={6} max={64} defaultValue={16} placeholder="16" />
              </div>
            </div>
          </div>

          <div className="checkbox-group">
            <div className="checkbox-item">
              <input type="checkbox" id="uppercase" defaultChecked />
              <label htmlFor="uppercase">A</label>
            </div>
            <div className="checkbox-item">
              <input type="checkbox" id="lowercase" defaultChecked />
              <label htmlFor="lowercase">a</label>
            </div>
            <div className="checkbox-item">
              <input type="checkbox" id="digits" defaultChecked />
              <label htmlFor="digits">1</label>
            </div>
            <div className="checkbox-item">
              <input type="checkbox" id="symbols" defaultChecked />
              <label htmlFor="symbols">!</label>
            </div>
          </div>

          <div className="button-row">
            <button 
              className="reset-btn" 
              onClick={resetSettings}
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
            <button 
              className="generate" 
              id="generateBtn" 
              onClick={generatePassword} 
              disabled={isLoading}
            >
              –°–ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ –ü–ê–†–û–õ–¨
            </button>
          </div>

          <div className="result-container">
            <input type="text" id="result" readOnly placeholder="–ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∑–¥–µ—Å—å" />
            <button className="copy-btn" onClick={() => copyToClipboard('result')}>‚ßâ</button>
          </div>
          
          <div className="button-group">
            <button 
              className="save-btn" 
              onClick={saveSettings}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>

        <div className="status" id="status">
          {error ? error : isLoading ? "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..." : "–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ"}
        </div>
      </div>
    </>
  );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –≤—ã–Ω–æ—Å–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
function log(msg, isSuccess = false) {
  const statusEl = document.getElementById('status');
  if (statusEl) {
    statusEl.textContent = msg;
    statusEl.className = isSuccess ? 'status success' : 'status';

    if (isSuccess) {
      setTimeout(() => {
        statusEl.className = 'status';
      }, 2000);
    }
  }
}

function getCharset() {
  let chars = '';
  if (document.getElementById('lowercase').checked) chars += 'abcdefghijkmnpqrstuvwxyz';
  if (document.getElementById('uppercase').checked) chars += 'ABCDEFGHJKLMNPQRSTUVWXYZ';
  if (document.getElementById('digits').checked) chars += '23456789';
  if (document.getElementById('symbols').checked) chars += '!@#$%&';
  return chars;
}

function hashToPassword(hash, length, charset) {
  return Array.from(hash).slice(0, length).map(b => charset[b % charset.length]).join('');
}

function stringToBytes(str) {
  return new TextEncoder().encode(str);
}

function getSettings() {
  return {
    service: document.getElementById("service").value, 
    account: document.getElementById("account").value,
    device: document.getElementById("device").value,
    version: document.getElementById("version").value,
    length: document.getElementById("length").value,
    lowercase: document.getElementById("lowercase").checked,
    uppercase: document.getElementById("uppercase").checked,
    digits: document.getElementById("digits").checked,
    symbols: document.getElementById("symbols").checked
  };
}

function applySettings(obj) {
  if (obj.service) {
    document.getElementById("service").value = obj.service;
  }
  document.getElementById("account").value = obj.account || "default";
  document.getElementById("device").value = obj.device || "default";
  document.getElementById("version").value = obj.version || "00";
  document.getElementById("length").value = obj.length || 16;
  document.getElementById("lowercase").checked = obj.lowercase ?? true;
  document.getElementById("uppercase").checked = obj.uppercase ?? true;
  document.getElementById("digits").checked = obj.digits ?? true;
  document.getElementById("symbols").checked = obj.symbols ?? true;
}

function copySettings() {
  const settings = getSettings();
  const encoded = btoa(JSON.stringify(settings));
  navigator.clipboard.writeText(encoded).then(() => {
    document.getElementById("settings").value = encoded;
    log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã", true);
  }).catch(() => {
    document.getElementById("settings").value = encoded;
    log("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä—É—á–Ω—É—é");
  });
}

function pasteSettings() {
  try {
    const text = document.getElementById("settings").value.trim();
    const decoded = JSON.parse(atob(text));
    applySettings(decoded);
    log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", true);
  } catch (e) {
    log("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫");
  }
}

function copyToClipboard(id) {
  const el = document.getElementById(id);
  el.select();
  document.execCommand("copy");
  log("–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", true);
}

function generatePassword() {
  if (!window.Module || !window.Module.isReady) {
    log("–ú–æ–¥—É–ª—å Argon2 –µ—â—ë –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
    return;
  }

  const master = document.getElementById("master").value.trim();
  const service = document.getElementById("service").value.trim();
  if (!master || !service) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-—Ñ—Ä–∞–∑—É –∏ —Å–µ—Ä–≤–∏—Å");
    return;
  }

  const salt = service + ":" +
               document.getElementById("account").value + ":" +
               document.getElementById("device").value + ":" +
               document.getElementById("version").value;

  const charset = getCharset();
  const length = parseInt(document.getElementById("length").value) || 16;

  if (charset.length < 5) {
    alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤");
    return;
  }

  log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è...");

  try {
    let mod = window.Module;
    let pwdBytes = stringToBytes(master);
    let saltBytes = stringToBytes(salt);
    let pwdPtr = mod._malloc(pwdBytes.length);
    let saltPtr = mod._malloc(saltBytes.length);
    let hashPtr = mod._malloc(32);
    let encodedPtr = mod._malloc(512);

    new Uint8Array(mod.HEAPU8.buffer, pwdPtr, pwdBytes.length).set(pwdBytes);
    new Uint8Array(mod.HEAPU8.buffer, saltPtr, saltBytes.length).set(saltBytes);

    const result = mod._argon2_hash(
      3, 65536, 1,
      pwdPtr, pwdBytes.length,
      saltPtr, saltBytes.length,
      hashPtr, 32,
      encodedPtr, 512,
      2, 0x13
    );

    if (result !== 0) {
      log("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + result);
      return;
    }

    const hash = new Uint8Array(mod.HEAPU8.buffer, hashPtr, 32);
    const password = hashToPassword(hash, length, charset);
    document.getElementById("result").value = password;
    log("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", true);

    mod._free(pwdPtr);
    mod._free(saltPtr);
    mod._free(hashPtr);
    mod._free(encodedPtr);
  } catch (e) {
    console.error("Error during password generation:", e);
    log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: " + e.message);
  }
}